rules:
  - id: object-deserialization-gadget
    metadata:
      cwe:
        - "CWE-502: Deserialization of Untrusted Data"
      owasp:
        - A08:2017 - Insecure Deserialization
        - A08:2021 - Software and Data Integrity Failures
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION
      references:
        - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
        - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
        - https://nvd.nist.gov/vuln/detail/CVE-2016-1000031
        - https://github.com/apache/commons-fileupload/commit/02f6b2c4ef9aebf9cf8e55de8b90e73430b69385
      category: security
      technology:
        - java
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - audit
      likelihood: LOW
      impact: HIGH
      confidence: LOW
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - "Insecure Deserialization "
    message: Found object deserialization - a class implementing Serializable
      interface. Deserializing entire Java objects is dangerous because
      malicious actors can create Java object streams with unintended
      consequences. Ensure that the objects being deserialized are not
      user-controlled. If this must be done, consider using HMACs to sign the
      data stream to make sure it is not tampered with, or consider only
      transmitting object fields and populating a new object.
    severity: WARNING
    languages:
      - java
    pattern: class $CLASS { ... $RETURN readObject(ObjectInputStream $IN) { ... } }
